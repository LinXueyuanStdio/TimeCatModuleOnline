apply from: "${gradle.ext.localGradleDir}/project/header.gradle"
apply from: rootProject.file("gradle/pluginConfig.gradle")

android {
    ndkVersion "21.3.6528147"
    def managerProjectName = project.ext.PictureBedPlugin["managerProjectName"]
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/'+managerProjectName+'/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/'+managerProjectName+'/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api 'androidx.appcompat:appcompat:1.2.0'
    api project(':online:module-plugin')
    api rootProject.ext.timecat["middle-block"]
    api rootProject.ext.timecat["component-CommonSetting"]
}


def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()

    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        println "复制${name}到assets中. ${inputFile.absolutePath}->${outputFile.absolutePath}"
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn(gradle.includedBuild(projectName).task(taskName))
}

def generateAssets(generateAssetsTask, buildType) {
    def managerName = project.ext.PictureBedPlugin["managerName"]
    def managerProjectName = project.ext.PictureBedPlugin["managerProjectName"]
    def pluginManagerApkFile = file(
            "${gradle.includedBuild(managerName).projectDir.absolutePath}" +
                    "/${managerProjectName}/build" +
                    "/outputs/apk/${buildType}/" +
                    "${managerProjectName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            managerName,
            buildType,
            managerProjectName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            ":${managerProjectName}:assemble${buildType.capitalize()}"
    )

    def pluginName = project.ext.PictureBedPlugin["pluginName"]
    def pluginProjectName = project.ext.PictureBedPlugin["pluginProjectName"]
    def pluginZip = file(
            "${gradle.includedBuild(pluginName).projectDir.absolutePath}" +
                    "/build" +
                    "/plugin-${buildType}.zip"
    )
    generateAssetsTask.dependsOn createCopyTask(
            pluginName,
            buildType,
            'plugin-zip',
            "plugin-${buildType}.zip",
            pluginZip,
            ":${pluginProjectName}:package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}