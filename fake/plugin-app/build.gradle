apply plugin: 'com.android.application'
apply plugin: 'com.xiaojinzi.component.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: rootProject.file("gradle/pluginConfig.gradle")

//region 签名
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyfile = null

Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def keystoreFilepath = properties.getProperty("keystore.path")

if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyfile = file(keystoreFilepath)
}
//endregion

android {
    signingConfigs {
        config {
            storeFile keyfile
            storePassword keystorePSW
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    ndkVersion "21.3.6528147"
    def managerProjectName = project.ext.PictureBedPlugin["managerProjectName"]
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/'+managerProjectName+'/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/'+managerProjectName+'/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']
        manifestPlaceholders = [
                //AR76G1XB3HKJ 属于应用"测试"独有的 Android AppKey, 用于配置SDK
                MTA_APPKEY : "AR76G1XB3HKJ",
                //标注应用推广渠道用以区分新用户来源，可填写如应用宝，豌豆荚等
                MTA_CHANNEL: "酷安"
        ]
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api 'androidx.appcompat:appcompat:1.2.0'
    api project(':online:module-plugin')
    api rootProject.ext.timecat["component-CommonSetting"]
}


def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()

    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        println "复制${name}到assets中. ${inputFile.absolutePath}->${outputFile.absolutePath}"
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn(gradle.includedBuild(projectName).task(taskName))
}

def generateAssets(generateAssetsTask, buildType) {
    def managerName = project.ext.PictureBedPlugin["managerName"]
    def managerProjectName = project.ext.PictureBedPlugin["managerProjectName"]
    def pluginManagerApkFile = file(
            "${gradle.includedBuild(managerName).projectDir.absolutePath}" +
                    "/${managerProjectName}/build" +
                    "/outputs/apk/${buildType}/" +
                    "${managerProjectName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            managerName,
            buildType,
            managerProjectName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            ":${managerProjectName}:assemble${buildType.capitalize()}"
    )

    def pluginName = project.ext.PictureBedPlugin["pluginName"]
    def pluginProjectName = project.ext.PictureBedPlugin["pluginProjectName"]
    def pluginZip = file(
            "${gradle.includedBuild(pluginName).projectDir.absolutePath}" +
                    "/build" +
                    "/plugin-${buildType}.zip"
    )
    generateAssetsTask.dependsOn createCopyTask(
            pluginName,
            buildType,
            'plugin-zip',
            "plugin-${buildType}.zip",
            pluginZip,
            ":${pluginProjectName}:package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}